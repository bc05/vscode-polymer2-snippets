{
  "Polymer Element": {
    "prefix": "p-polymer-element",
    "description": "Polymer 3 web component extended from PolymerElement",
    "body": [
      "import {PolymerElement, html} from '@polymer/polymer/polymer-element.js';",
      "",
      "/**",
      " * `${2:LowerCaseDashedName}` ${3:Description}",
      " *",
      " * @customElement",
      " * @polymer",
      " * @demo",
      " * ",
      " */",
      "class ${1:PascalCaseName} extends PolymerElement {",
      "\tstatic get properties() {",
      "\t\treturn {",
      "",
      "\t\t}",
      "\t}",
      "",
      "\tstatic get template() {",
      "\t\treturn html`",
      "",
      "\t\t`;",
      "\t}",
      "",
      "\t/**",
      "\t * Instance of the element is created/upgraded. Use: initializing state,",
      "\t * set up event listeners, create shadow dom.",
      "\t * @constructor",
      "\t */",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t}",
      "",
      "\t/**",
      "\t * Use for one-time configuration of your component after local",
      "\t * DOM is initialized.",
      "\t */",
      "\tready() {",
      "\t\tsuper.ready();",
      "\t}",
      "}",
      "",
      "customElements.define('${2:LowerCaseDashedName}', ${1:PascalCaseName});"
    ]
  },
  "LitHtml Element": {
    "prefix": "p-lit-element",
    "description": "LitElement web component extended from lit-html",
    "body": [
      "import { LitElement, html } from 'lit-element';",
      "",
      "/**",
      " * `${2:LowerCaseDashedName}` ${3:Description}",
      " *",
      " * @customElement",
      " * @polymer",
      " * @demo",
      " * ",
      " */",
      "class ${1:PascalCaseName} extends LitElement {",
      "\tstatic get properties() {",
      "\t\treturn {",
      "",
      "\t\t}",
      "\t}",
      "",
      "\t/**",
      "\t * Instance of the element is created/upgraded. Use: initializing state,",
      "\t * set up event listeners, create shadow dom.",
      "\t * @constructor",
      "\t */",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t}",
      "",
      "\t/**",
      "\t * Implement to describe the element's DOM using lit-html.",
      "\t * Use the element current props to return a lit-html template result",
      "\t * to render into the element.",
      "\t */",
      "\trender() {",
      "\t\treturn html`",
      "",
      "\t\t`;",
      "\t}",
      "",
      "}",
      "",
      "customElements.define('${2:pascal-case-name}', ${1:PascalCaseName});"
    ]
  },
  "LitHtml Element Css": {
    "prefix": "p-lit-element-css",
    "description": "LitElement web component extended from lit-html",
    "body": [
      "import { LitElement, html, css } from 'lit-element';",
      "",
      "/**",
      " * `${2:LowerCaseDashedName}` ${3:Description}",
      " *",
      " * @customElement",
      " * @polymer",
      " * @demo",
      " * ",
      " */",
      "class ${1:PascalCaseName} extends LitElement {",
      "\tstatic get properties() {",
      "\t\treturn {",
      "",
      "\t\t}",
      "\t}",
      "",
      "\t/**",
      "\t * Instance of the element is created/upgraded. Use: initializing state,",
      "\t * set up event listeners, create shadow dom.",
      "\t * @constructor",
      "\t */",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t}",
      "",
      "\tstatic get styles() {",
      "\t\treturn css`",
      "\t\t\t",
      "\t\t`;",
      "\t}",
      "",
      "\t/**",
      "\t * Implement to describe the element's DOM using lit-html.",
      "\t * Use the element current props to return a lit-html template result",
      "\t * to render into the element.",
      "\t */",
      "\trender() {",
      "\t\treturn html`",
      "",
      "\t\t`;",
      "\t}",
      "",
      "}",
      "",
      "customElements.define('${2:pascal-case-name}', ${1:PascalCaseName});"
    ]
  },
  "Polymer Hybrid Behaviors": {
    "prefix": "p-hybridbehaviors",
    "description": "Add hybrid behaviors to your class-style element",
    "body": [
      "Polymer.mixinBehaviors([$0], Polymer.Element)"
    ]
  },
  "Polymer Properties": {
    "prefix": "p-properties",
    "description": "Polymer properties()",
    "body": [
      "/**",
      "  * Object describing property-related metadata used by Polymer features",
      "  */",
      "static get properties() {",
      "\treturn {",
      "\t\t$0",
      "\t};",
      "}"
    ]
  },
  "Polymer Observers": {
    "prefix": "p-observers",
    "description": "Polymer observers()",
    "body": [
      "/**",
      "  * Array of strings describing multi-property observer methods and their",
      "  * dependant properties",
      "  */",
      "static get observers() {",
      "\treturn [",
      "\t\t'$1Changed($0)'",
      "\t];",
      "}"
    ]
  },
  "Polymer Constructor": {
    "prefix": "p-lifecycle-constructor",
    "description": "Polymer constructor()",
    "body": [
      "/**",
      "  * Instance of the element is created/upgraded. Useful for initializing",
      "  * state, set up event listeners, create shadow dom.",
      "  * @constructor",
      "  */",
      "constructor() {",
      "\tsuper();",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Web Components v1 connectedCallback": {
    "prefix": "p-lifecycle-connected",
    "description": "Web Components v1 connectedCallback()",
    "body": [
      "/**",
      "  * Called every time the element is inserted into the DOM. Useful for ",
      "  * running setup code, such as fetching resources or rendering.",
      "  * Generally, you should try to delay work until this time.",
      "  */",
      "connectedCallback() {",
      "\tsuper.connectedCallback();",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Web Components v1 disconnectedCallback": {
    "prefix": "p-lifecycle-disconnected",
    "description": "Web Components v1 disconnectedCallback ()",
    "body": [
      "/**",
      "  * Called every time the element is removed from the DOM. Useful for ",
      "  * running clean up code (removing event listeners, etc.).",
      "  */",
      "disconnectedCallback() {",
      "\tsuper.disconnectedCallback();",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Web Components v1 attributeChangedCallback": {
    "prefix": "p-lifecycle-attrchanged",
    "description": "Web Components v1 attributeChangedCallback()",
    "body": [
      "/**",
      "  * An attribute was added, removed, updated, or replaced. Also called for",
      "  * initial values when an element is created by the parser, or upgraded.",
      "  * Note: only attributes listed in the observedAttributes property will",
      "  * receive this callback. ",
      "  */",
      "attributeChangedCallback(attrName, oldVal, newVal) {",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Polymer ready": {
    "prefix": "p-lifecycle-ready",
    "description": "Polymer specific ready()",
    "body": [
      "/**",
      " * Use for one-time configuration of your component after local DOM is",
      " * initialized.",
      " */",
      "ready() {",
      "\tsuper.ready();",
      "",
      "}"
    ]
  },
  "Polymer DispatchEvent": {
    "prefix": "p-dispatchevent",
    "description": "Fire custom event",
    "body": [
      "this.dispatchEvent(new CustomEvent('$1', {",
      "\tdetail: {",
      "\t\t$0",
      "\t}",
      "}));"
    ]
  },
  "Polymer DispatchEvent Thought ShadowDOM": {
    "prefix": "p-dispatchevent-composed",
    "description": "Fire custom event throught shadow DOM boundaries",
    "body": [
      "this.dispatchEvent(new CustomEvent('$1', {",
      "\tbubbles: true,",
      "\tcomposed: true,",
      "\tdetail: {",
      "\t\t$0",
      "\t}",
      "}));"
    ]
  },
  "Polymer Declare Property - Type and Default Value": {
    "prefix": "p-property-basic",
    "description": "Add property with type and default value.",
    "body": [
      "/**",
      " * ${4:Description for prop}",
      " */",
      "${1:PropertyName}: {",
      "\ttype: ${2:Boolean|Date|Number|String|Array|Object},",
      "\tvalue: ${3:boolean|number|string|function},",
      "},"
    ]
  },
  "Polymer Declare Property - Type, Default Value, Observer": {
    "prefix": "p-property-observer",
    "description": "Add property with type, default value, and observer.",
    "body": [
      "/**",
      " * ${5:Description for prop}",
      " */",
      "${1:PropertyName}: {",
      "\ttype: ${2:Boolean|Date|Number|String|Array|Object},",
      "\tvalue: ${3:boolean|number|string|function},",
      "\tobserver: '${4:string}',",
      "},"
    ]
  },
  "Polymer Declare Property - Typem Computed": {
    "prefix": "p-property-computed",
    "description": "Add property with type and computed.",
    "body": [
      "/**",
      " * ${5:Description for prop}",
      " */",
      "${1:PropertyName}: {",
      "\ttype: ${2:Boolean|Date|Number|String|Array|Object},",
      "\tcomputed: '${4:string}',",
      "},"
    ]
  },
  "Polymer Declare Property - All Keys": {
    "prefix": "p-property-all",
    "description": "Add property with all keys",
    "body": [
      "/**",
      " * ${9:Description for prop}",
      " */",
      "${1:PropertyName}: {",
      "\ttype: ${2:Boolean|Date|Number|String|Array|Object},",
      "\tvalue: ${3:boolean|number|string|function},",
      "\treflectToAttribute: ${4:boolean},",
      "\treadOnly: ${5:boolean},",
      "\tnotify: ${6:boolean},",
      "\tcomputed: ${7:string},",
      "\tobserver: ${8:string},",
      "},"
    ]
  },
  "Polymer Mixin": {
    "prefix": "p-mixin",
    "description": "Define a mixin that returns a subclass",
    "body": [
      "/**",
      " * ${1:MixinNamePascelCase} - ${2:Description for mixin}",
      " * @polymerMixin",
      " * @mixinFunction",
      " */",
      "${1:MixinNamePascelCase} = (superClass) => class extends superClass {",
      "",
      "}"
    ]
  },
  "Polymer Deduping Mixin": {
    "prefix": "p-mixin-dedup",
    "description": "Define a deduping mixin for sharing",
    "body": [
      "import {dedupingMixin} from '@polymer/polymer/lib/utils/mixin.js';",
      "",
      "/**",
      " * ${1:MixinNamePascelCase} - ${2:Description for mixin}",
      " * @polymerMixin",
      " * @mixinFunction",
      " */",
      "let internal${1:MixinNamePascelCase} = (base) =>",
      "\t/**",
      "\t * @polymerMixinClass",
      "\t */",
      "\tclass extends base {",
      "",
      "\t}",
      "",
      "export const ${1:MixinNamePascelCase} = dedupingMixin(internal${1:MixinNamePascelCase})"
    ]
  },
  "Polymer template()": {
    "prefix": "p-template",
    "description": "Define Polymer element template",
    "body": [
      "static get template() {",
      "\treturn html`",
      "\t\t${1:template}",
      "\t`;",
      "}"
    ]
  },
  "LitElement": {
    "prefix": "l-element",
    "description": "LitElement web component extended from lit-html",
    "body": [
      "import {LitElement, html} from 'lit-element';",
      "",
      "/**",
      " * `${2:LowerCaseDashedName}` ${3:Description}",
      " *",
      " * @customElement",
      " * @polymer",
      " * @demo",
      " * ",
      " */",
      "class ${1:PascalCaseName} extends LitElement {",
      "\tstatic get properties() {",
      "\t\treturn {",
      "",
      "\t\t}",
      "\t}",
      "",
      "\t/**",
      "\t * Instance of the element is created/upgraded. Use: initializing state,",
      "\t * set up event listeners, create shadow dom.",
      "\t * @constructor",
      "\t */",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t}",
      "",
      "\tstatic get styles() {",
      "\t\treturn [",
      "\t\t\tsuper.styles,",
      "\t\t\tcss``,",
      "\t\t];",
      "\t}",
      "",
      "\t/**",
      "\t * Implement to describe the element's DOM using lit-html.",
      "\t * Use the element current props to return a lit-html template result",
      "\t * to render into the element.",
      "\t */",
      "\trender() {",
      "\t\treturn html`",
      "",
      "\t\t`;",
      "\t}",
      "",
      "}",
      "",
      "customElements.define('${2:LowerCaseDashedName}', ${1:PascalCaseName});"
    ]
  },
  "LitElement Properties": {
    "prefix": "l-properties",
    "description": "Declare your element’s properties by implementing a static properties getter",
    "body": [
      "/**",
      "  * Declared properties and their corresponding attributes",
      "  */",
      "static get properties() {",
      "\treturn {",
      "\t\t$0",
      "\t};",
      "}"
    ]
  },
  "LitElement get styles()": {
    "prefix": "l-get-styles",
    "description": "Define styles in a static styles property.",
    "body": [
      "static get styles() {",
      "\treturn css`",
      "\t`",
      "}"
    ]
  },
  "LitElement get styles() with super": {
    "prefix": "l-get-styles-super",
    "description": "Define styles in a static styles property with super class.",
    "body": [
      "static get styles() {",
      "\treturn [",
      "\t\tsuper.styles,",
      "\t\tcss`",
      "\t\t`",
      "\t\"];",
      "}"
    ]
  },
  "LitElement render() html": {
    "prefix": "l-render-html",
    "description": "Implement to describe the element's DOM using lit-html",
    "body": [
      "render() {",
      "\treturn html`",
      "\t\t${2:template}",
      "\t`;",
      "}"
    ]
  },
  "LitElement render() svg": {
    "prefix": "l-render-svg",
    "description": "Implement to create partial SVG templates (render inside <svg> tag)",
    "body": [
      "render() {",
      "\treturn svg`",
      "\t\t${2:template}",
      "\t`;",
      "}"
    ]
  },
  "LitElement firstUpdated()": {
    "prefix": "l-firstUpdated",
    "description": "Called after the element’s DOM has been updated the first time, immediately before updated is called.",
    "body": [
      "firstUpdated() {",
      "\t${2:yourLogic}",
      "}"
    ]
  },
  "LitElement shouldUpdate()": {
    "prefix": "",
    "description": "Controls whether an update should proceed. Implement shouldUpdate to specify which property changes should cause updates. By default, this method always returns true.",
    "body": [
      "shouldUpdate(changedProperties) {",
      "\t${2:yourLogic}",
      "}"
    ]
  },
  "LitElement requestUpdate()": {
    "prefix": "l-requestUpdate",
    "description": "f hasChanged returned true, requestUpdate fires, and the update proceeds. To manually start an element update, call requestUpdate with no parameters.",
    "body": [
      "this.requestUpdate();"
    ]
  },
  "LitElement updateComplete": {
    "prefix": "l-updateComplete",
    "description": "The updateComplete Promise resolves when the element has finished updating. Use updateComplete to wait for an update:",
    "body": [
      "await this.updateComplete;"
    ]
  }
}